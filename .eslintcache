[{"E:\\MVP\\Projects\\charity\\src\\index.js":"1","E:\\MVP\\Projects\\charity\\src\\views\\Profile.js":"2","E:\\MVP\\Projects\\charity\\src\\Routes\\Routes.js":"3","E:\\MVP\\Projects\\charity\\src\\components\\features.jsx":"4","E:\\MVP\\Projects\\charity\\src\\components\\header.jsx":"5","E:\\MVP\\Projects\\charity\\src\\components\\navigation.jsx":"6","E:\\MVP\\Projects\\charity\\src\\components\\about.jsx":"7","E:\\MVP\\Projects\\charity\\src\\components\\gallery.jsx":"8","E:\\MVP\\Projects\\charity\\src\\components\\Team.jsx":"9","E:\\MVP\\Projects\\charity\\src\\components\\contact.jsx":"10","E:\\MVP\\Projects\\charity\\src\\views\\App.js":"11","E:\\MVP\\Projects\\charity\\src\\context\\UserContext.js":"12","E:\\MVP\\Projects\\charity\\src\\views\\Login.js":"13","E:\\MVP\\Projects\\charity\\src\\views\\Register.js":"14","E:\\MVP\\Projects\\charity\\src\\views\\Search.js":"15","E:\\MVP\\Projects\\charity\\src\\views\\InfoChange.js":"16","E:\\MVP\\Projects\\charity\\src\\views\\NewEvent.js":"17","E:\\MVP\\Projects\\charity\\src\\Utils\\getTagsUtil.js":"18","E:\\MVP\\Projects\\charity\\src\\Utils\\global.js":"19","E:\\MVP\\Projects\\charity\\src\\components\\banner.jsx":"20","E:\\MVP\\Projects\\charity\\src\\components\\svg.jsx":"21","E:\\MVP\\Projects\\charity\\src\\components\\EventDetails.jsx":"22","E:\\MVP\\Projects\\charity\\src\\views\\MyEvents.js":"23","E:\\MVP\\Projects\\charity\\src\\views\\eventVolunteer.js":"24","E:\\MVP\\Projects\\charity\\src\\views\\allJobs.js":"25","E:\\MVP\\Projects\\charity\\src\\views\\addTags.js":"26","E:\\MVP\\Projects\\charity\\src\\components\\VolunteerDetails.jsx":"27","E:\\MVP\\Projects\\charity\\src\\components\\footer.jsx":"28","E:\\MVP\\Projects\\charity\\src\\components\\messageModal.jsx":"29","E:\\MVP\\Projects\\charity\\src\\views\\allVolunteers.js":"30","E:\\MVP\\Projects\\charity\\src\\views\\AllVolunteers.js":"31","E:\\MVP\\Projects\\charity\\src\\views\\AllOrganizations.js":"32","E:\\MVP\\Projects\\charity\\src\\components\\OrgDetails.jsx":"33"},{"size":516,"mtime":1613737899088,"results":"34","hashOfConfig":"35"},{"size":4294,"mtime":1614693929387,"results":"36","hashOfConfig":"35"},{"size":2667,"mtime":1614615384995,"results":"37","hashOfConfig":"35"},{"size":894,"mtime":1612469607259,"results":"38","hashOfConfig":"35"},{"size":665,"mtime":1614184656811,"results":"39","hashOfConfig":"35"},{"size":4711,"mtime":1614695636896,"results":"40","hashOfConfig":"35"},{"size":673,"mtime":1614473532745,"results":"41","hashOfConfig":"35"},{"size":7797,"mtime":1614267289898,"results":"42","hashOfConfig":"35"},{"size":1040,"mtime":1612224345032,"results":"43","hashOfConfig":"35"},{"size":1528,"mtime":1613670982598,"results":"44","hashOfConfig":"35"},{"size":780,"mtime":1614336980763,"results":"45","hashOfConfig":"35"},{"size":91,"mtime":1612354907545,"results":"46","hashOfConfig":"35"},{"size":4613,"mtime":1614692384889,"results":"47","hashOfConfig":"35"},{"size":9798,"mtime":1616010734607,"results":"48","hashOfConfig":"35"},{"size":5072,"mtime":1615201041850,"results":"49","hashOfConfig":"35"},{"size":9805,"mtime":1614691957936,"results":"50","hashOfConfig":"35"},{"size":9193,"mtime":1614693185528,"results":"51","hashOfConfig":"35"},{"size":268,"mtime":1614299506270,"results":"52","hashOfConfig":"35"},{"size":62,"mtime":1615199989486,"results":"53","hashOfConfig":"35"},{"size":283,"mtime":1613667065520,"results":"54","hashOfConfig":"35"},{"size":7905,"mtime":1613747169478,"results":"55","hashOfConfig":"35"},{"size":2819,"mtime":1614694750381,"results":"56","hashOfConfig":"35"},{"size":3516,"mtime":1614692775019,"results":"57","hashOfConfig":"35"},{"size":8374,"mtime":1614691668286,"results":"58","hashOfConfig":"35"},{"size":4584,"mtime":1614690892667,"results":"59","hashOfConfig":"35"},{"size":3006,"mtime":1614690307443,"results":"60","hashOfConfig":"35"},{"size":4381,"mtime":1614695390370,"results":"61","hashOfConfig":"35"},{"size":1605,"mtime":1616001681082,"results":"62","hashOfConfig":"35"},{"size":1332,"mtime":1614337845194,"results":"63","hashOfConfig":"35"},{"size":8048,"mtime":1614611426127,"results":"64","hashOfConfig":"35"},{"size":5473,"mtime":1615219096092,"results":"65","hashOfConfig":"35"},{"size":5215,"mtime":1614786662955,"results":"66","hashOfConfig":"35"},{"size":3783,"mtime":1614695027546,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1s3xdrw",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":8,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"70"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"70"},"E:\\MVP\\Projects\\charity\\src\\index.js",[],["146","147"],"E:\\MVP\\Projects\\charity\\src\\views\\Profile.js",[],"E:\\MVP\\Projects\\charity\\src\\Routes\\Routes.js",[],"E:\\MVP\\Projects\\charity\\src\\components\\features.jsx",[],["148","149"],"E:\\MVP\\Projects\\charity\\src\\components\\header.jsx",[],"E:\\MVP\\Projects\\charity\\src\\components\\navigation.jsx",[],"E:\\MVP\\Projects\\charity\\src\\components\\about.jsx",[],"E:\\MVP\\Projects\\charity\\src\\components\\gallery.jsx",[],"E:\\MVP\\Projects\\charity\\src\\components\\Team.jsx",[],"E:\\MVP\\Projects\\charity\\src\\components\\contact.jsx",[],"E:\\MVP\\Projects\\charity\\src\\views\\App.js",[],"E:\\MVP\\Projects\\charity\\src\\context\\UserContext.js",[],"E:\\MVP\\Projects\\charity\\src\\views\\Login.js",[],"E:\\MVP\\Projects\\charity\\src\\views\\Register.js",[],"E:\\MVP\\Projects\\charity\\src\\views\\Search.js",["150","151","152","153"],"import React, { useState, useEffect } from \"react\";\r\nimport serverURL from \"../Utils/global\";\r\nimport Footer from \"../components/footer\";\r\nimport Banner from \"../components/banner\";\r\nimport { Dropdown } from \"semantic-ui-react\";\r\nimport JsonData from \"../data/data.json\";\r\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from \"mdbreact\";\r\nimport axios from \"axios\";\r\nimport EventDetails from \"../components/EventDetails\";\r\nimport Cookies from \"js-cookie\";\r\nimport { getTags } from \"../Utils/getTagsUtil\";\r\nimport \"../styles/search.css\";\r\n\r\nexport default function Search() {\r\n   const [tags, setTags] = useState([]);\r\n   const [events, setEvents] = useState([]);\r\n   const [usedTags, setUsedTags] = useState([]);\r\n   const [cities, setCities] = useState([]);\r\n   const [usedCityName, setUsedCityName] = useState(\"\");\r\n   const [usedCity, setUsedCity] = useState(\"\");\r\n   useEffect(() => {\r\n      getTags().then((tagList) => {\r\n         setTags(tagList);\r\n      });\r\n      axios\r\n         .get(serverURL + \"/cities/list\")\r\n         .then(function (response) {\r\n            //console.log(response.data.message);\r\n            setCities(response.data.message);\r\n         })\r\n         .catch(console.log);\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n      //console.log(tags);\r\n      cities.forEach((city) => {\r\n         Object.defineProperty(city, \"key\", Object.getOwnPropertyDescriptor(city, \"id\"));\r\n         delete city[\"id\"];\r\n         Object.defineProperty(city, \"text\", Object.getOwnPropertyDescriptor(city, \"name\"));\r\n         delete city[\"name\"];\r\n         city.value = city[\"text\"];\r\n      });\r\n   }, [cities]);\r\n\r\n   useEffect(() => {\r\n      queryEvents();\r\n   }, [usedCity]);\r\n\r\n   const switchActivity = (e, data) => {\r\n      for (let tagList in tags) {\r\n         for (let tag in data.value) {\r\n            if (tags[tagList].text === data.value[tag]) {\r\n               usedTags.push(tags[tagList].key);\r\n            }\r\n         }\r\n      }\r\n      queryEvents();\r\n   };\r\n\r\n   const queryEvents = () => {\r\n      const bodyParameters = {\r\n         tags: usedTags,\r\n         city_id: usedCity,\r\n      };\r\n      axios\r\n         .post(serverURL + \"/jobs/jobsbytags\", bodyParameters)\r\n         .then(function (response) {\r\n            setEvents(response.data.data);\r\n         })\r\n         .catch(console.log);\r\n      setUsedTags([]);\r\n   };\r\n   const onChangeCity = (e, data) => {\r\n      if (data.value === \"\") setUsedCity(\"\");\r\n      else {\r\n         data.options.forEach((city) => {\r\n            if (data.value === city.value) {\r\n               setUsedCity(city.key);\r\n               setUsedCityName(city.name);\r\n            }\r\n         });\r\n      }\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <Banner data={{ header: \"الفعاليات الجديده\" }} />\r\n         <div className=\"custom-search-content\">\r\n            <div className=\"searchTagsList\">\r\n               <div className=\"tagsHolder\">\r\n                  <span className=\"mr-3\">\r\n                     <Dropdown\r\n                        className=\"mt-3\"\r\n                        placeholder={JsonData.Search.city}\r\n                        fluid\r\n                        selection\r\n                        clearable\r\n                        selection\r\n                        options={cities}\r\n                        onChange={onChangeCity}\r\n                     />\r\n                  </span>\r\n                  <span>\r\n                     <Dropdown\r\n                        className=\"mt-3\"\r\n                        placeholder={JsonData.Search.tags}\r\n                        options={tags}\r\n                        search\r\n                        selection\r\n                        fluid\r\n                        multiple\r\n                        allowAdditions\r\n                        onChange={(e, data) => switchActivity(e, data)}\r\n                     />\r\n                  </span>\r\n               </div>\r\n            </div>\r\n            <div className=\"eventsList\">\r\n               {events.map((event) => (\r\n                  <MDBCol md=\"3\" key={event.id}>\r\n                     <MDBCard className=\"card-event\">\r\n                        <MDBCardImage\r\n                           className=\"img-fluid customImage\"\r\n                           src={serverURL + \"/\" + event.img}\r\n                           waves\r\n                        />\r\n                        <MDBCardBody>\r\n                           <MDBCardTitle className=\"customCardFont description-cut\">\r\n                              {event.name}\r\n                           </MDBCardTitle>\r\n                           <MDBCardText className=\"customCardFont description-cut\">\r\n                              {event.description}\r\n                           </MDBCardText>\r\n                           <div>\r\n                              <EventDetails props={{ event: event }} />\r\n                           </div>\r\n                        </MDBCardBody>\r\n                     </MDBCard>\r\n                  </MDBCol>\r\n               ))}\r\n            </div>\r\n         </div>\r\n         <Footer />\r\n      </>\r\n   );\r\n}\r\n","E:\\MVP\\Projects\\charity\\src\\views\\InfoChange.js",[],"E:\\MVP\\Projects\\charity\\src\\views\\NewEvent.js",[],"E:\\MVP\\Projects\\charity\\src\\Utils\\getTagsUtil.js",[],"E:\\MVP\\Projects\\charity\\src\\Utils\\global.js",[],"E:\\MVP\\Projects\\charity\\src\\components\\banner.jsx",[],"E:\\MVP\\Projects\\charity\\src\\components\\svg.jsx",[],["154","155"],"E:\\MVP\\Projects\\charity\\src\\components\\EventDetails.jsx",[],"E:\\MVP\\Projects\\charity\\src\\views\\MyEvents.js",["156"],"import \"../styles/MyEvents.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport serverURL from \"../Utils/global\";\r\nimport axios from \"axios\";\r\nimport Cookies from \"js-cookie\";\r\nimport JsonData from \"../data/data.json\";\r\nimport { MDBDataTableV5, MDBBtn, MDBBadge, MDBNavLink } from \"mdbreact\";\r\n\r\nexport default function MyEvents() {\r\n   const [myEventsRows, setMyEventsRows] = useState([]);\r\n   const [myEventsColumns] = useState([\r\n      { label: JsonData.MyEvents.eventName, field: \"eventName\", width: 150 },\r\n      {\r\n         label: JsonData.MyEvents.registerEndDate,\r\n         field: \"endDateReg\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.MyEvents.eventEndDate,\r\n         field: \"endDate\",\r\n         width: 150,\r\n      },\r\n\r\n      {\r\n         label: JsonData.MyEvents.eventCount,\r\n         field: \"count\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.MyEvents.eventStatus,\r\n         field: \"active\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.MyEvents.moreInfo,\r\n         field: \"moreInfo\",\r\n         width: 150,\r\n      },\r\n   ]);\r\n   useEffect(() => {\r\n      queryMyEvents();\r\n      console.log(Cookies.getJSON(\"session\").token);\r\n   }, []);\r\n\r\n   const transformData = (data) => {\r\n      //console.log(myEvents);\r\n      // const rows = [];\r\n      data.forEach((dataRow) => {\r\n         let tempObject = {\r\n            eventName: dataRow.name,\r\n            endDate: dataRow.end_date,\r\n            endDateReg: dataRow.registration_date,\r\n            active: (\r\n               <>\r\n                  {dataRow.can_register === \"working\" ? (\r\n                     <MDBBadge color=\"warning\">{JsonData.MyEvents.eventRegOpen}</MDBBadge>\r\n                  ) : dataRow.is_ended === \"working\" ? (\r\n                     <MDBBadge color=\"success\">{JsonData.MyEvents.eventInWork}</MDBBadge>\r\n                  ) : (\r\n                     <MDBBadge color=\"danger\">{JsonData.MyEvents.eventEnded}</MDBBadge>\r\n                  )}\r\n               </>\r\n            ),\r\n            count: dataRow.volunteers_count,\r\n            moreInfo: (\r\n               <>\r\n                  <MDBNavLink\r\n                     className=\"waves-effect waves-light\"\r\n                     to={{ pathname: `/EventVolunteer`, params: { dataRow } }}>\r\n                     <MDBBtn color=\"success\" size=\"sm\" className=\"My-events-font\">\r\n                        {JsonData.MyEvents.eventMoreBtn}\r\n                     </MDBBtn>\r\n                  </MDBNavLink>\r\n               </>\r\n            ),\r\n         };\r\n         setMyEventsRows((oldArray) => [...oldArray, tempObject]);\r\n      });\r\n   };\r\n   const queryMyEvents = () => {\r\n      const token = Cookies.getJSON(\"session\").token;\r\n      const config = {\r\n         headers: { Authorization: `bearer ${token}` },\r\n      };\r\n      axios\r\n         .get(serverURL + \"/organization/alljobs\", config)\r\n         .then(function (response) {\r\n            //console.log(response.data.data);\r\n            transformData(response.data.data);\r\n         })\r\n         .catch(console.log);\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <MDBDataTableV5\r\n            hover\r\n            scrollX\r\n            entriesOptions={[5, 10, 20, 25]}\r\n            entries={10}\r\n            pagesAmount={4}\r\n            data={{ columns: myEventsColumns, rows: myEventsRows }}\r\n            btn\r\n            className=\"My-events-font\"\r\n            entriesLabel=\"المبادرات\"\r\n            searchLabel=\"بحث\"\r\n         />\r\n      </>\r\n   );\r\n}\r\n","E:\\MVP\\Projects\\charity\\src\\views\\eventVolunteer.js",["157","158","159","160","161","162","163","164","165"],"import \"../styles/MyEvents.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport serverURL from \"../Utils/global\";\r\nimport axios from \"axios\";\r\nimport Cookies from \"js-cookie\";\r\nimport { MDBDataTableV5, MDBBtn, MDBBadge } from \"mdbreact\";\r\nimport { Rating } from \"semantic-ui-react\";\r\nimport { useAlert } from \"react-alert\";\r\nimport VolDetails from \"../components/VolunteerDetails\";\r\nimport JsonData from \"../data/data.json\";\r\n\r\nexport default function EventVolunteer(props) {\r\n   const alert = useAlert();\r\n   const [myEventsRows, setMyEventsRows] = useState([]);\r\n   const [eventDetails, setMyEventDetails] = useState({});\r\n   const [starRates, setStarRates] = useState([]);\r\n   const [dataCallback, setDataCallback] = useState({});\r\n   const [myEventsColumns, setMyEventsColumns] = useState([\r\n      { label: JsonData.eventVol.volName, field: \"userName\", width: 150 },\r\n      {\r\n         label: JsonData.eventVol.volEmail,\r\n         field: \"userEmail\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.eventVol.volPhone,\r\n         field: \"userMobile\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.eventVol.volNID,\r\n         field: \"NID\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.eventVol.volStatus,\r\n         field: \"active\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.eventVol.volRate,\r\n         field: \"rating\",\r\n         width: 150,\r\n      },\r\n   ]);\r\n\r\n   const handleStars = (dataRow, event) => {\r\n      console.log(dataRow);\r\n      console.log(event.target.ariaPosInSet);\r\n      //console.log(eventDetails);\r\n      const token = Cookies.getJSON(\"session\").token;\r\n      const config = {\r\n         headers: { Authorization: `bearer ${token}` },\r\n      };\r\n      const bodyParameters = {\r\n         job_id: eventDetails.id,\r\n         volunteer_id: dataRow.id,\r\n         rating: event.target.ariaPosInSet,\r\n      };\r\n      //console.log(bodyParameters);\r\n      axios\r\n         .post(serverURL + \"/organization/ratevolunteer\", bodyParameters, config)\r\n         .then(function (response) {\r\n            console.log(response);\r\n         })\r\n         .catch(console.log);\r\n   };\r\n\r\n   const handleAccept = (data) => {\r\n      //console.log(data);\r\n      //console.log(eventDetails);\r\n      const token = Cookies.getJSON(\"session\").token;\r\n      const config = {\r\n         headers: { Authorization: `bearer ${token}` },\r\n      };\r\n      const bodyParameters = {\r\n         job_id: eventDetails.id,\r\n         volunteer_id: data.id,\r\n         value: \"accepted\",\r\n      };\r\n      console.log(bodyParameters);\r\n      axios\r\n         .post(serverURL + \"/organization/updaterequest\", bodyParameters, config)\r\n         .then(function (response) {\r\n            window.location.href = \"EventVolunteer\";\r\n         })\r\n         .catch(console.log);\r\n   };\r\n   const handleReject = (data) => {\r\n      //console.log(data);\r\n      //console.log(eventDetails);\r\n      const token = Cookies.getJSON(\"session\").token;\r\n      const config = {\r\n         headers: { Authorization: `bearer ${token}` },\r\n      };\r\n      const bodyParameters = {\r\n         job_id: eventDetails.id,\r\n         volunteer_id: data.id,\r\n         value: \"rejected\",\r\n      };\r\n      console.log(bodyParameters);\r\n      axios\r\n         .post(serverURL + \"/organization/updaterequest\", bodyParameters, config)\r\n         .then(function (response) {\r\n            window.location.href = \"EventVolunteer\";\r\n         })\r\n         .catch(console.log);\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (starRates.length === dataCallback.length) {\r\n         dataCallback.forEach((dataRow) => {\r\n            console.log(dataRow);\r\n            let tempObject = {\r\n               userName: (\r\n                  <div>\r\n                     <VolDetails props={{ vol: dataRow }} />\r\n                  </div>\r\n               ),\r\n               userEmail: dataRow.email,\r\n               userMobile: dataRow.mobile,\r\n               NID: dataRow.NID,\r\n               active: (\r\n                  <>\r\n                     {dataRow.status == \"pending\" && eventDetails.is_ended == \"working\" ? (\r\n                        <>\r\n                           <MDBBtn\r\n                              color=\"success\"\r\n                              size=\"sm\"\r\n                              className=\"My-events-font\"\r\n                              onClick={() => handleAccept(dataRow)}>\r\n                              {JsonData.eventVol.volAcceptBtn}\r\n                           </MDBBtn>\r\n                           <MDBBtn\r\n                              color=\"danger\"\r\n                              size=\"sm\"\r\n                              className=\"My-events-font\"\r\n                              onClick={() => handleReject(dataRow)}>\r\n                              {JsonData.eventVol.volRejectBtn}\r\n                           </MDBBtn>\r\n                        </>\r\n                     ) : (\r\n                        <MDBBadge color=\"success\">{JsonData.eventVol.volAccepted}</MDBBadge>\r\n                     )}\r\n                  </>\r\n               ),\r\n               rating: (\r\n                  <>\r\n                     {eventDetails.is_ended == \"working\" ? (\r\n                        <MDBBadge color=\"success\">{JsonData.eventVol.volWorking}</MDBBadge>\r\n                     ) : (\r\n                        <Rating\r\n                           maxRating={5}\r\n                           size=\"huge\"\r\n                           icon=\"star\"\r\n                           defaultRating={dataRow.rating}\r\n                           onRate={(event) => handleStars(dataRow, event)}\r\n                        />\r\n                     )}\r\n                  </>\r\n               ),\r\n            };\r\n\r\n            setMyEventsRows((oldArray) => [...oldArray, tempObject]);\r\n         });\r\n         //console.log(starRates);\r\n      }\r\n   }, [starRates]);\r\n\r\n   const transformData = (data) => {\r\n      data.forEach((dataRow) => {\r\n         let rates = [\r\n            {\r\n               tooltip: \"Very Bad\",\r\n            },\r\n            {\r\n               tooltip: \"Poor\",\r\n            },\r\n            {\r\n               tooltip: \"Ok\",\r\n            },\r\n            {\r\n               tooltip: \"Good\",\r\n            },\r\n            {\r\n               tooltip: \"Excellent\",\r\n            },\r\n         ];\r\n         if (dataRow.rating == -1) {\r\n            setStarRates((oldArray) => [...oldArray, rates]);\r\n         } else {\r\n            let i = 0;\r\n            rates.forEach((rate) => {\r\n               if (dataRow.rating - 1 == i) {\r\n                  rate[\"choosed\"] = true;\r\n               }\r\n               i++;\r\n            });\r\n\r\n            setStarRates((oldArray) => [...oldArray, rates]);\r\n         }\r\n      });\r\n   };\r\n   useEffect(() => {\r\n      props.location.params\r\n         ? localStorage.setItem(\"eventInfo\", JSON.stringify(props.location.params.dataRow))\r\n         : console.log();\r\n      queryMyVolunteers();\r\n   }, []);\r\n\r\n   const queryMyVolunteers = () => {\r\n      const token = Cookies.getJSON(\"session\").token;\r\n      const config = {\r\n         headers: { Authorization: `bearer ${token}` },\r\n      };\r\n      let retrievedObject;\r\n      if (localStorage.getItem(\"eventInfo\")) {\r\n         retrievedObject = localStorage.getItem(\"eventInfo\");\r\n         //console.log(\"retrievedObject: \", JSON.parse(retrievedObject));\r\n         Object.assign(eventDetails, JSON.parse(retrievedObject));\r\n      } else {\r\n         alert.error(JsonData.eventVol.volAlertError);\r\n         window.location.href(\"/MyEvents\");\r\n      }\r\n      //console.log(eventDetails);\r\n      const bodyParameters = {\r\n         job_id: eventDetails.id,\r\n      };\r\n      axios\r\n         .post(serverURL + \"/jobs/volunteers\", bodyParameters, config)\r\n         .then(function (response) {\r\n            // console.log(response);\r\n            setDataCallback(response.data);\r\n            transformData(response.data);\r\n         })\r\n         .catch(console.log);\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <MDBDataTableV5\r\n            hover\r\n            entriesOptions={[5, 10, 20, 25]}\r\n            entries={10}\r\n            pagesAmount={4}\r\n            scrollX\r\n            data={{ columns: myEventsColumns, rows: myEventsRows }}\r\n            btn\r\n            className=\"My-events-font\"\r\n            entriesLabel=\"المبادرات\"\r\n            searchLabel=\"بحث\"\r\n         />\r\n      </>\r\n   );\r\n}\r\n","E:\\MVP\\Projects\\charity\\src\\views\\allJobs.js",["166","167","168","169","170"],"import \"../styles/MyEvents.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport serverURL from \"../Utils/global\";\r\nimport axios from \"axios\";\r\nimport { Rating } from \"semantic-ui-react\";\r\nimport JsonData from \"../data/data.json\";\r\nimport Cookies from \"js-cookie\";\r\nimport { MDBDataTableV5, MDBBadge } from \"mdbreact\";\r\n\r\nexport default function AllJobs() {\r\n   const [myEventsRows, setMyEventsRows] = useState([]);\r\n   const [myEventsColumns, setMyEventsColumns] = useState([\r\n      {\r\n         label: JsonData.AllJobs.orgName,\r\n         field: \"orgInfo\",\r\n         width: 150,\r\n      },\r\n      { label: JsonData.AllJobs.eventName, field: \"eventInfo\", width: 150 },\r\n\r\n      {\r\n         label: JsonData.AllJobs.orgEmail,\r\n         field: \"orgEmail\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.AllJobs.orgPrimaryPhoneNumber,\r\n         field: \"orgMobile\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.AllJobs.orgSecondaryPhoneNumber,\r\n         field: \"orgMobile1\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.AllJobs.city,\r\n         field: \"city\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.AllJobs.status,\r\n         field: \"status\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.AllJobs.startDate,\r\n         field: \"startDate\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.AllJobs.endDate,\r\n         field: \"endDate\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.AllJobs.rating,\r\n         field: \"rate\",\r\n         width: 150,\r\n      },\r\n   ]);\r\n\r\n   const transformData = (data) => {\r\n      console.log(data);\r\n      data.forEach((dataRow) => {\r\n         let tempObject = {\r\n            eventInfo: dataRow.name,\r\n            orgInfo: dataRow.organization,\r\n            city: dataRow.city,\r\n            orgEmail: dataRow.organization_email,\r\n            orgMobile: dataRow.organization_mobile,\r\n            orgMobile1: dataRow.organization_mobile2,\r\n            startDate: dataRow.registration_date,\r\n            endDate: dataRow.end_date,\r\n            status: (\r\n               <>\r\n                  {dataRow.status == \"pending\" ? (\r\n                     <MDBBadge color=\"warning\" key={dataRow.id}>\r\n                        {JsonData.AllJobs.pending}\r\n                     </MDBBadge>\r\n                  ) : dataRow.status == \"rejected\" ? (\r\n                     <MDBBadge color=\"danger\" key={dataRow.id}>\r\n                        {JsonData.AllJobs.rejected}\r\n                     </MDBBadge>\r\n                  ) : (\r\n                     <MDBBadge color=\"success\" key={dataRow.id}>\r\n                        {JsonData.AllJobs.accepted}\r\n                     </MDBBadge>\r\n                  )}\r\n               </>\r\n            ),\r\n            rate: (\r\n               <>\r\n                  {dataRow.status == \"rejected\" ? (\r\n                     <MDBBadge color=\"danger\" key={dataRow.id}>\r\n                        {JsonData.AllJobs.unrated}\r\n                     </MDBBadge>\r\n                  ) : dataRow.is_ended == \"working\" ? (\r\n                     <MDBBadge color=\"warning\" key={dataRow.id}>\r\n                        {JsonData.AllJobs.notRatedYet}\r\n                     </MDBBadge>\r\n                  ) : (\r\n                     <Rating\r\n                        key={dataRow.id}\r\n                        maxRating={5}\r\n                        size=\"huge\"\r\n                        icon=\"star\"\r\n                        disabled\r\n                        defaultRating={dataRow.stars}\r\n                     />\r\n                  )}\r\n               </>\r\n            ),\r\n         };\r\n         setMyEventsRows((oldArray) => [...oldArray, tempObject]);\r\n      });\r\n   };\r\n\r\n   useEffect(() => {\r\n      const token = Cookies.getJSON(\"session\").token;\r\n      const config = {\r\n         headers: { Authorization: `bearer ${token}` },\r\n      };\r\n      axios\r\n         .get(serverURL + \"/userdata\", config)\r\n         .then(function (response) {\r\n            console.log(response.data.data.jobs);\r\n            transformData(response.data.data.jobs);\r\n         })\r\n         .catch(console.log);\r\n   }, []);\r\n\r\n   return (\r\n      <>\r\n         <MDBDataTableV5\r\n            hover\r\n            entriesOptions={[5, 10, 20, 25]}\r\n            entries={10}\r\n            pagesAmount={4}\r\n            scrollX\r\n            data={{ columns: myEventsColumns, rows: myEventsRows }}\r\n            className=\"My-events-font\"\r\n            entriesLabel=\"المبادرات\"\r\n            searchLabel=\"بحث\"\r\n         />\r\n      </>\r\n   );\r\n}\r\n","E:\\MVP\\Projects\\charity\\src\\views\\addTags.js",["171"],"import React, { useState } from \"react\";\r\nimport Cookies from \"js-cookie\";\r\nimport JsonData from \"../data/data.json\";\r\nimport axios from \"axios\";\r\nimport serverURL from \"../Utils/global\";\r\nimport { useAlert } from \"react-alert\";\r\nimport { MDBJumbotron, MDBBtn, MDBContainer, MDBRow, MDBCol, MDBInput } from \"mdbreact\";\r\nimport \"react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css\";\r\n\r\nexport default function AddTag() {\r\n   const alert = useAlert();\r\n   const [newTag, setNewTag] = useState(\"\");\r\n   const onChangeTag = (event) => {\r\n      console.log(event.target.value);\r\n      setNewTag(event.target.value);\r\n   };\r\n\r\n   const handleNewTag = () => {\r\n      const token = Cookies.getJSON(\"session\").token;\r\n      const config = {\r\n         headers: { Authorization: `bearer ${token}` },\r\n      };\r\n      const bodyParameters = {\r\n         name: newTag,\r\n      };\r\n      if (newTag) {\r\n         // console.log(bodyParameters);\r\n         axios\r\n            .post(serverURL + \"/tags/store\", bodyParameters, config)\r\n            .then(function (response) {\r\n               if (response.status == 200) {\r\n                  console.log(response);\r\n                  alert.show(JsonData.AddTag.addTagSuccess);\r\n               } else {\r\n                  alert.error(JsonData.AddTag.AddTagFail);\r\n               }\r\n            })\r\n            .catch(console.log);\r\n      } else {\r\n         alert.error(JsonData.AddTag.addTagError);\r\n      }\r\n      //console.log(bodyParameters);\r\n      //console.log(token);\r\n   };\r\n\r\n   return (\r\n      <div className=\"custom-new-event-container\">\r\n         <div></div>\r\n         <div className=\"newEvent\">\r\n            <MDBContainer className=\"mt-5 text-center\">\r\n               <MDBRow>\r\n                  <MDBCol>\r\n                     <MDBJumbotron>\r\n                        <h2 className=\"h1 display-3\">{JsonData.AddTag.addTagHeader}</h2>\r\n                        <form className=\"form-Sizer\">\r\n                           <MDBInput\r\n                              label={JsonData.AddTag.addTagLabel}\r\n                              className=\"textDirection\"\r\n                              onChange={onChangeTag}\r\n                              type=\"text\"\r\n                              size=\"lg\"\r\n                              validate\r\n                              error=\"wrong\"\r\n                              success=\"right\"\r\n                           />\r\n\r\n                           <p className=\"lead mt-3\">\r\n                              <MDBBtn\r\n                                 color=\"primary\"\r\n                                 className=\"textformatter\"\r\n                                 onClick={handleNewTag}>\r\n                                 {JsonData.AddTag.addTagButton}\r\n                              </MDBBtn>\r\n                           </p>\r\n                        </form>\r\n                     </MDBJumbotron>\r\n                  </MDBCol>\r\n               </MDBRow>\r\n            </MDBContainer>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n","E:\\MVP\\Projects\\charity\\src\\components\\VolunteerDetails.jsx",["172","173"],"import React,{useEffect,useState} from 'react'\r\nimport { Button, Modal } from 'semantic-ui-react'\r\nimport \"../styles/customEventDetails.css\"\r\nimport Cookies from \"js-cookie\";\r\nimport axios from \"axios\";\r\nimport { MDBDataTableV5, MDBBadge } from \"mdbreact\";\r\nimport { Rating } from \"semantic-ui-react\";\r\nimport serverURL from \"../Utils/global\";\r\nimport JsonData from \"../data/data.json\";\r\n\r\nconst VolDetails = (props) => {\r\n  const [open, setOpen] = React.useState(false)\r\n   const [myEventsRows, setMyEventsRows] = useState([]);\r\n   const [myEventsColumns] = useState([\r\n      {\r\n         label: JsonData.volDetails.orgName,\r\n         field: \"orgInfo\",\r\n         width: 100,\r\n      },\r\n      { label: JsonData.volDetails.eventName, field: \"eventInfo\", width: 100 },\r\n      {\r\n         label: JsonData.volDetails.city,\r\n         field: \"city\",\r\n         width: 100,\r\n      },\r\n      {\r\n         label: JsonData.volDetails.status,\r\n         field: \"status\",\r\n         width: 100,\r\n      },\r\n      {\r\n         label: JsonData.volDetails.startDate,\r\n         field: \"startDate\",\r\n         width: 100,\r\n      },\r\n      {\r\n         label: JsonData.volDetails.endDate,\r\n         field: \"endDate\",\r\n         width: 100,\r\n      },\r\n      {\r\n         label: JsonData.volDetails.volRate,\r\n         field: \"rate\",\r\n         width: 100,\r\n      },\r\n   ]);\r\n\r\n    const transformData = (data) => {\r\n      //console.log(data);\r\n      data.forEach((dataRow) => {\r\n         let tempObject = {\r\n            eventInfo: dataRow.name,\r\n            orgInfo: dataRow.organization,\r\n            city: dataRow.city,\r\n            startDate: dataRow.registration_date,\r\n            endDate: dataRow.end_date,\r\n            status: (\r\n               <>\r\n                  {dataRow.status === \"pending\" ? (\r\n                     <MDBBadge color=\"warning\" key={dataRow.id}>\r\n                        {JsonData.volDetails.volPending}\r\n                     </MDBBadge>\r\n                  ) : (\r\n                     <MDBBadge color=\"success\" key={dataRow.id}>\r\n                        {JsonData.volDetails.volAccepted}\r\n                     </MDBBadge>\r\n                  )}\r\n               </>\r\n            ),\r\n            rate: (\r\n               <>\r\n                  {dataRow.is_ended === \"working\" ? (\r\n                     <MDBBadge color=\"warning\" key={dataRow.id}>\r\n                        {JsonData.volDetails.volNotRated}\r\n                     </MDBBadge>\r\n                  ) : (\r\n                     <Rating\r\n                        key={dataRow.id}\r\n                        maxRating={5}\r\n                        size=\"huge\"\r\n                        icon=\"star\"\r\n                        disabled\r\n                        defaultRating={dataRow.stars}\r\n                     />\r\n                  )}\r\n               </>\r\n            ),\r\n         };\r\n         setMyEventsRows((oldArray) => [...oldArray, tempObject]);\r\n      });\r\n   };\r\n\r\nuseEffect(()=>{      \r\n  \r\n  const token = Cookies.getJSON(\"session\").token;\r\n      const config = {\r\n         headers: { Authorization: `bearer ${token}` },\r\n      };\r\n\r\n        axios\r\n         .get(serverURL + \"/volunteer/show/\"+props.props.vol.id, config)\r\n         .then(function (response) {\r\n          // console.log(\"THIS IS RESPONSE\")\r\n           // console.log(response.data.message.jobs);\r\n            transformData(response.data.message.jobs)\r\n         })\r\n         .catch(console.log);\r\n},[])\r\n\r\n  //console.log(props.props);\r\n  return (\r\n    <Modal\r\n\r\n      open={open}\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      trigger={  <a href=\"#\" className=\"text-decoration-none blue-text\">{props.props.vol.name}</a>}\r\n    >\r\n      <Modal.Content scrolling >\r\n        <Modal.Description className=\"descriptionHolder\">\r\n <MDBDataTableV5\r\n            hover\r\n            entriesOptions={[5, 10, 20, 25]}\r\n            entries={10}\r\n            pagesAmount={4}\r\n            data={{ columns: myEventsColumns, rows: myEventsRows }} \r\n            btn\r\n            className=\"My-events-font\"\r\n            entriesLabel=\"المتطوعين\"\r\n            searchLabel=\"بحث\"\r\n         />\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button onClick={() =>  setOpen(false)}>{JsonData.volDetails.cancelBtn}</Button>       \r\n      </Modal.Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default VolDetails\r\n","E:\\MVP\\Projects\\charity\\src\\components\\footer.jsx",[],"E:\\MVP\\Projects\\charity\\src\\components\\messageModal.jsx",[],"E:\\MVP\\Projects\\charity\\src\\views\\allVolunteers.js",["174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195"],"E:\\MVP\\Projects\\charity\\src\\views\\AllVolunteers.js",["196","197","198","199"],"import \"../styles/MyEvents.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport serverURL from \"../Utils/global\";\r\nimport axios from \"axios\";\r\nimport Cookies from \"js-cookie\";\r\nimport { MDBDataTableV5, MDBBtn, MDBBadge } from \"mdbreact\";\r\nimport VolDetails from \"../components/VolunteerDetails\";\r\nimport JsonData from \"../data/data.json\";\r\n\r\nexport default function AllVolunteers() {\r\n   const [volRows, setVolRows] = useState([]);\r\n   const [dataCallback, setDataCallback] = useState({});\r\n   const [volColumns, setVolColumns] = useState([\r\n      { label: JsonData.AllVolunteers.volName, field: \"userName\", width: 150 },\r\n      {\r\n         label: JsonData.AllVolunteers.volEmail,\r\n         field: \"userEmail\",\r\n         width: 300,\r\n      },\r\n      {\r\n         label: JsonData.AllVolunteers.volPhone,\r\n         field: \"userMobile\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.AllVolunteers.volNID,\r\n         field: \"NID\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.AllVolunteers.volTags,\r\n         field: \"tags\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.AllVolunteers.status,\r\n         field: \"status\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.AllVolunteers.action,\r\n         field: \"action\",\r\n         width: 150,\r\n      },\r\n   ]);\r\n\r\n   const handleAction = (data) => {\r\n      //console.log(data);\r\n      //console.log(eventDetails);\r\n      const token = Cookies.getJSON(\"session\").token;\r\n      const config = {\r\n         headers: { Authorization: `bearer ${token}` },\r\n      };\r\n      const bodyParameters = {\r\n         id: data.id,\r\n         status: data.status == \"working\" ? \"stopped\" : \"working\",\r\n      };\r\n      console.log(bodyParameters);\r\n      axios\r\n         .post(serverURL + \"/admin/volunteerstatus\", bodyParameters, config)\r\n         .then(function (response) {\r\n            window.location.href = \"AllVolunteers\";\r\n         })\r\n         .catch(console.log);\r\n   };\r\n\r\n   useEffect(() => {\r\n      transformData();\r\n      //console.log(dataCallback);\r\n   }, [dataCallback]);\r\n   const transformData = () => {\r\n      if (Object.keys(dataCallback).length) {\r\n         dataCallback.forEach((dataRow) => {\r\n            console.log(dataRow);\r\n            let tempObject = {\r\n               userName: (\r\n                  <div>\r\n                     <VolDetails props={{ vol: dataRow }} />\r\n                  </div>\r\n               ),\r\n               userEmail: dataRow.email,\r\n               userMobile: dataRow.mobile,\r\n               NID: dataRow.NID,\r\n               tags: setTagsAsString(dataRow.tags),\r\n               status: (\r\n                  <>\r\n                     {dataRow.status === \"working\" ? (\r\n                        <MDBBadge color=\"success\" key={dataRow.id}>\r\n                           {JsonData.AllVolunteers.volWorking}\r\n                        </MDBBadge>\r\n                     ) : (\r\n                        <MDBBadge color=\"warning\" key={dataRow.id}>\r\n                           {JsonData.AllVolunteers.volStopped}\r\n                        </MDBBadge>\r\n                     )}\r\n                  </>\r\n               ),\r\n               action: (\r\n                  <>\r\n                     {dataRow.status == \"working\" ? (\r\n                        <>\r\n                           <MDBBtn\r\n                              color=\"danger\"\r\n                              size=\"sm\"\r\n                              className=\"My-events-font\"\r\n                              onClick={() => handleAction(dataRow)}>\r\n                              {JsonData.AllVolunteers.stopAccBtn}\r\n                           </MDBBtn>\r\n                        </>\r\n                     ) : (\r\n                        <MDBBtn\r\n                           color=\"success\"\r\n                           size=\"sm\"\r\n                           className=\"My-events-font\"\r\n                           onClick={() => handleAction(dataRow)}>\r\n                           {JsonData.AllVolunteers.startAccBtn}\r\n                        </MDBBtn>\r\n                     )}\r\n                  </>\r\n               ),\r\n            };\r\n\r\n            setVolRows((oldArray) => [...oldArray, tempObject]);\r\n         });\r\n      } //console.log(starRates);\r\n   };\r\n   const setTagsAsString = (tags) => {\r\n      //console.log(tags);\r\n      let allTags = \"\";\r\n      tags.forEach((tag) => {\r\n         allTags += tag.text;\r\n         allTags += \" , \";\r\n      });\r\n      allTags = allTags.substring(0, allTags.length - 2);\r\n      return allTags;\r\n   };\r\n   useEffect(() => {\r\n      queryMyVolunteers();\r\n   }, []);\r\n\r\n   const queryMyVolunteers = () => {\r\n      const token = Cookies.getJSON(\"session\").token;\r\n      const config = {\r\n         headers: { Authorization: `bearer ${token}` },\r\n      };\r\n      axios\r\n         .get(serverURL + \"/volunteer/list\", config)\r\n         .then(function (response) {\r\n            console.log(response.data.message);\r\n            setDataCallback(response.data.message);\r\n         })\r\n         .catch(console.log);\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <MDBDataTableV5\r\n            hover\r\n            entriesOptions={[5, 10, 20, 25]}\r\n            entries={10}\r\n            pagesAmount={4}\r\n            scrollX\r\n            data={{ columns: volColumns, rows: volRows }}\r\n            btn\r\n            className=\"My-events-font\"\r\n            entriesLabel=\"المتطوعين\"\r\n            searchLabel=\"بحث\"\r\n         />\r\n      </>\r\n   );\r\n}\r\n","E:\\MVP\\Projects\\charity\\src\\views\\AllOrganizations.js",["200","201","202","203","204","205"],"import \"../styles/MyEvents.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport serverURL from \"../Utils/global\";\r\nimport axios from \"axios\";\r\nimport Cookies from \"js-cookie\";\r\nimport { MDBDataTableV5, MDBBtn, MDBBadge } from \"mdbreact\";\r\nimport { Rating } from \"semantic-ui-react\";\r\nimport { useAlert } from \"react-alert\";\r\nimport JsonData from \"../data/data.json\";\r\nimport OrgDetails from \"../components/OrgDetails\";\r\n\r\nexport default function AllOrganizations() {\r\n   const alert = useAlert();\r\n   const [volRows, setVolRows] = useState([]);\r\n   const [dataCallback, setDataCallback] = useState({});\r\n   const [volColumns, setVolColumns] = useState([\r\n      { label: JsonData.AllOrganizations.orgName, field: \"userName\", width: 150 },\r\n      {\r\n         label: JsonData.AllOrganizations.orgEmail,\r\n         field: \"userEmail\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.AllOrganizations.orgPrimaryPhoneNumber,\r\n         field: \"userMobile\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.AllOrganizations.orgSecondaryPhoneNumber,\r\n         field: \"userMobile1\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.AllOrganizations.status,\r\n         field: \"status\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.AllOrganizations.action,\r\n         field: \"action\",\r\n         width: 150,\r\n      },\r\n   ]);\r\n\r\n   const handleAction = (data) => {\r\n      console.log(data);\r\n      //console.log(eventDetails);\r\n      const token = Cookies.getJSON(\"session\").token;\r\n      const config = {\r\n         headers: { Authorization: `bearer ${token}` },\r\n      };\r\n      const bodyParameters = {\r\n         id: data.id,\r\n         status: data.status == \"working\" ? \"stopped\" : \"working\",\r\n      };\r\n      console.log(bodyParameters);\r\n      axios\r\n         .post(serverURL + \"/admin/organizationstatus\", bodyParameters, config)\r\n         .then(function (response) {\r\n            window.location.href = \"AllOrganizations\";\r\n         })\r\n         .catch(console.log);\r\n   };\r\n\r\n   useEffect(() => {\r\n      transformData();\r\n      //console.log(dataCallback);\r\n   }, [dataCallback]);\r\n   const transformData = () => {\r\n      if (Object.keys(dataCallback).length) {\r\n         dataCallback.forEach((dataRow) => {\r\n            //console.log(dataRow);\r\n            let tempObject = {\r\n               userName: (\r\n                  <div>\r\n                     <OrgDetails props={{ org: dataRow }} />\r\n                  </div>\r\n               ),\r\n               userEmail: dataRow.email,\r\n               userMobile: dataRow.mobile,\r\n               userMobile1: dataRow.mobile2,\r\n               status: (\r\n                  <>\r\n                     {dataRow.status === \"working\" ? (\r\n                        <MDBBadge color=\"success\" key={dataRow.id}>\r\n                           {JsonData.AllOrganizations.orgWorking}\r\n                        </MDBBadge>\r\n                     ) : (\r\n                        <MDBBadge color=\"warning\" key={dataRow.id}>\r\n                           {JsonData.AllOrganizations.orgStopped}\r\n                        </MDBBadge>\r\n                     )}\r\n                  </>\r\n               ),\r\n               action: (\r\n                  <>\r\n                     {dataRow.status == \"working\" ? (\r\n                        <>\r\n                           <MDBBtn\r\n                              color=\"danger\"\r\n                              size=\"sm\"\r\n                              className=\"My-events-font\"\r\n                              onClick={() => handleAction(dataRow)}>\r\n                              {JsonData.AllOrganizations.stopAccBtn}\r\n                           </MDBBtn>\r\n                        </>\r\n                     ) : (\r\n                        <MDBBtn\r\n                           color=\"success\"\r\n                           size=\"sm\"\r\n                           className=\"My-events-font\"\r\n                           onClick={() => handleAction(dataRow)}>\r\n                           {JsonData.AllOrganizations.startAccBtn}\r\n                        </MDBBtn>\r\n                     )}\r\n                  </>\r\n               ),\r\n            };\r\n\r\n            setVolRows((oldArray) => [...oldArray, tempObject]);\r\n         });\r\n      } //console.log(starRates);\r\n   };\r\n\r\n   useEffect(() => {\r\n      queryMyVolunteers();\r\n   }, []);\r\n\r\n   const queryMyVolunteers = () => {\r\n      const token = Cookies.getJSON(\"session\").token;\r\n      const config = {\r\n         headers: { Authorization: `bearer ${token}` },\r\n      };\r\n      axios\r\n         .get(serverURL + \"/organization/list\", config)\r\n         .then(function (response) {\r\n            //console.log(response);\r\n            setDataCallback(response.data.message);\r\n         })\r\n         .catch(console.log);\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <MDBDataTableV5\r\n            hover\r\n            entriesOptions={[5, 10, 20, 25]}\r\n            entries={10}\r\n            pagesAmount={4}\r\n            scrollX\r\n            data={{ columns: volColumns, rows: volRows }}\r\n            btn\r\n            className=\"My-events-font\"\r\n            entriesLabel=\"المتطوعين\"\r\n            searchLabel=\"بحث\"\r\n         />\r\n      </>\r\n   );\r\n}\r\n","E:\\MVP\\Projects\\charity\\src\\components\\OrgDetails.jsx",["206","207","208"],"import React,{useEffect,useState} from 'react'\r\nimport { Button, Modal } from 'semantic-ui-react'\r\nimport \"../styles/customEventDetails.css\"\r\nimport Cookies from \"js-cookie\";\r\nimport axios from \"axios\";\r\nimport { MDBDataTableV5, MDBBadge } from \"mdbreact\";\r\nimport { Rating } from \"semantic-ui-react\";\r\nimport JsonData from \"../data/data.json\";\r\nimport serverURL from \"../Utils/global\";\r\n\r\nconst OrgDetails = (props) => {\r\n  const [open, setOpen] = React.useState(false)\r\n   const [myEventsRows, setMyEventsRows] = useState([]);\r\n   const [myEventsColumns] = useState([\r\n      { label: JsonData.MyEvents.eventName, field: \"eventInfo\", width: 150 },\r\n      {\r\n         label: JsonData.MyEvents.city,\r\n         field: \"city\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.MyEvents.registerEndDate,\r\n         field: \"startDate\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.MyEvents.eventEndDate,\r\n         field: \"endDate\",\r\n         width: 150,\r\n      },\r\n      {\r\n         label: JsonData.MyEvents.eventStatus,\r\n         field: \"status\",\r\n         width: 150,\r\n      },\r\n   ]);\r\n\r\n    const transformData = (data) => {\r\n      //console.log(data);\r\n      data.forEach((dataRow) => {\r\n         let tempObject = {\r\n            eventInfo: dataRow.name,\r\n            orgInfo: dataRow.organization,\r\n            city: dataRow.city,\r\n            startDate: dataRow.registration_date,\r\n            endDate: dataRow.end_date,\r\n                       status: (\r\n               <>\r\n                  {dataRow.can_register === \"working\" ? (\r\n                     <MDBBadge color=\"warning\" key={dataRow.id}>\r\n                        {JsonData.MyEvents.eventRegOpen}\r\n                     </MDBBadge>\r\n                  ) : (\r\n                    dataRow.is_ended === \"working\" ? (\r\n                    <MDBBadge color=\"success\" key={dataRow.id}>\r\n                        {JsonData.MyEvents.eventInWork}\r\n                     </MDBBadge>\r\n                    ):\r\n                    (<MDBBadge color=\"danger\" key={dataRow.id}>\r\n                        {JsonData.MyEvents.eventEnded}\r\n                     </MDBBadge>)\r\n                  )}\r\n               </>\r\n            ),\r\n \r\n         };\r\n         setMyEventsRows((oldArray) => [...oldArray, tempObject]);\r\n      });\r\n   };\r\n\r\nuseEffect(()=>{      \r\n  \r\n  const token = Cookies.getJSON(\"session\").token;\r\n      const config = {\r\n         headers: { Authorization: `bearer ${token}` },\r\n      };\r\n\r\n        axios\r\n         .get(serverURL + \"/organization/show/\"+props.props.org.id, config)\r\n         .then(function (response) {\r\n          // console.log(\"THIS IS RESPONSE\")\r\n            //console.log(response.data.message.jobs);\r\n            transformData(response.data.message.jobs)\r\n         })\r\n         .catch(console.log);\r\n},[])\r\n\r\n  //console.log(props.props);\r\n  return (\r\n    <Modal\r\n\r\n      open={open}\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      trigger={  <a href=\"#\" className=\"text-decoration-none blue-text\">{props.props.org.name}</a>}\r\n    >\r\n      <Modal.Content scrolling >\r\n        <Modal.Description className=\"descriptionHolder\">\r\n <MDBDataTableV5\r\n            hover\r\n            entriesOptions={[5, 10, 20, 25]}\r\n            entries={10}\r\n            pagesAmount={4}\r\n            data={{ columns: myEventsColumns, rows: myEventsRows }} \r\n            btn\r\n            className=\"My-events-font\"\r\n            entriesLabel=\"المبادرات\"\r\n            searchLabel=\"بحث\"\r\n         />\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button onClick={() =>  setOpen(false)}>{JsonData.MyEvents.eventCancelBtn}</Button>       \r\n      </Modal.Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default OrgDetails\r\n",{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","replacedBy":"212"},{"ruleId":"209","replacedBy":"213"},{"ruleId":"211","replacedBy":"214"},{"ruleId":"215","severity":1,"message":"216","line":10,"column":8,"nodeType":"217","messageId":"218","endLine":10,"endColumn":15},{"ruleId":"215","severity":1,"message":"219","line":19,"column":11,"nodeType":"217","messageId":"218","endLine":19,"endColumn":23},{"ruleId":"220","severity":1,"message":"221","line":47,"column":7,"nodeType":"222","endLine":47,"endColumn":17,"suggestions":"223"},{"ruleId":"224","severity":1,"message":"225","line":98,"column":25,"nodeType":"226","endLine":98,"endColumn":34},{"ruleId":"209","replacedBy":"227"},{"ruleId":"211","replacedBy":"228"},{"ruleId":"220","severity":1,"message":"229","line":43,"column":7,"nodeType":"222","endLine":43,"endColumn":9,"suggestions":"230"},{"ruleId":"215","severity":1,"message":"231","line":15,"column":25,"nodeType":"217","messageId":"218","endLine":15,"endColumn":42},{"ruleId":"215","severity":1,"message":"232","line":18,"column":28,"nodeType":"217","messageId":"218","endLine":18,"endColumn":46},{"ruleId":"233","severity":1,"message":"234","line":125,"column":38,"nodeType":"235","messageId":"236","endLine":125,"endColumn":40},{"ruleId":"233","severity":1,"message":"234","line":125,"column":76,"nodeType":"235","messageId":"236","endLine":125,"endColumn":78},{"ruleId":"233","severity":1,"message":"234","line":149,"column":45,"nodeType":"235","messageId":"236","endLine":149,"endColumn":47},{"ruleId":"220","severity":1,"message":"237","line":168,"column":7,"nodeType":"222","endLine":168,"endColumn":18,"suggestions":"238"},{"ruleId":"233","severity":1,"message":"234","line":189,"column":29,"nodeType":"235","messageId":"236","endLine":189,"endColumn":31},{"ruleId":"233","severity":1,"message":"234","line":194,"column":39,"nodeType":"235","messageId":"236","endLine":194,"endColumn":41},{"ruleId":"220","severity":1,"message":"239","line":209,"column":7,"nodeType":"222","endLine":209,"endColumn":9,"suggestions":"240"},{"ruleId":"215","severity":1,"message":"232","line":12,"column":28,"nodeType":"217","messageId":"218","endLine":12,"endColumn":46},{"ruleId":"233","severity":1,"message":"234","line":76,"column":35,"nodeType":"235","messageId":"236","endLine":76,"endColumn":37},{"ruleId":"233","severity":1,"message":"234","line":80,"column":38,"nodeType":"235","messageId":"236","endLine":80,"endColumn":40},{"ruleId":"233","severity":1,"message":"234","line":93,"column":35,"nodeType":"235","messageId":"236","endLine":93,"endColumn":37},{"ruleId":"233","severity":1,"message":"234","line":97,"column":40,"nodeType":"235","messageId":"236","endLine":97,"endColumn":42},{"ruleId":"233","severity":1,"message":"234","line":31,"column":36,"nodeType":"235","messageId":"236","endLine":31,"endColumn":38},{"ruleId":"220","severity":1,"message":"241","line":108,"column":3,"nodeType":"222","endLine":108,"endColumn":5,"suggestions":"242"},{"ruleId":"243","severity":1,"message":"244","line":117,"column":18,"nodeType":"245","endLine":117,"endColumn":73},{"ruleId":"215","severity":1,"message":"246","line":12,"column":10,"nodeType":"217","messageId":"218","endLine":12,"endColumn":15},{"ruleId":"247","severity":2,"message":"248","line":12,"column":18,"nodeType":"217","endLine":12,"endColumn":26},{"ruleId":"247","severity":2,"message":"249","line":13,"column":44,"nodeType":"217","endLine":13,"endColumn":52},{"ruleId":"215","severity":1,"message":"231","line":14,"column":25,"nodeType":"217","messageId":"218","endLine":14,"endColumn":42},{"ruleId":"247","severity":2,"message":"249","line":14,"column":46,"nodeType":"217","endLine":14,"endColumn":54},{"ruleId":"247","severity":2,"message":"249","line":15,"column":38,"nodeType":"217","endLine":15,"endColumn":46},{"ruleId":"215","severity":1,"message":"250","line":16,"column":25,"nodeType":"217","messageId":"218","endLine":16,"endColumn":40},{"ruleId":"247","severity":2,"message":"249","line":16,"column":44,"nodeType":"217","endLine":16,"endColumn":52},{"ruleId":"215","severity":1,"message":"232","line":17,"column":28,"nodeType":"217","messageId":"218","endLine":17,"endColumn":46},{"ruleId":"247","severity":2,"message":"249","line":17,"column":50,"nodeType":"217","endLine":17,"endColumn":58},{"ruleId":"247","severity":2,"message":"251","line":109,"column":4,"nodeType":"217","endLine":109,"endColumn":13},{"ruleId":"233","severity":1,"message":"234","line":124,"column":38,"nodeType":"235","messageId":"236","endLine":124,"endColumn":40},{"ruleId":"233","severity":1,"message":"234","line":124,"column":76,"nodeType":"235","messageId":"236","endLine":124,"endColumn":78},{"ruleId":"233","severity":1,"message":"234","line":148,"column":45,"nodeType":"235","messageId":"236","endLine":148,"endColumn":47},{"ruleId":"220","severity":1,"message":"237","line":167,"column":7,"nodeType":"222","endLine":167,"endColumn":18,"suggestions":"252"},{"ruleId":"215","severity":1,"message":"253","line":169,"column":10,"nodeType":"217","messageId":"218","endLine":169,"endColumn":23},{"ruleId":"233","severity":1,"message":"234","line":188,"column":29,"nodeType":"235","messageId":"236","endLine":188,"endColumn":31},{"ruleId":"233","severity":1,"message":"234","line":193,"column":39,"nodeType":"235","messageId":"236","endLine":193,"endColumn":41},{"ruleId":"247","severity":2,"message":"251","line":203,"column":4,"nodeType":"217","endLine":203,"endColumn":13},{"ruleId":"220","severity":1,"message":"254","line":205,"column":7,"nodeType":"222","endLine":205,"endColumn":9,"suggestions":"255"},{"ruleId":"215","severity":1,"message":"256","line":212,"column":11,"nodeType":"217","messageId":"218","endLine":212,"endColumn":26},{"ruleId":"215","severity":1,"message":"257","line":222,"column":13,"nodeType":"217","messageId":"218","endLine":222,"endColumn":27},{"ruleId":"215","severity":1,"message":"258","line":13,"column":23,"nodeType":"217","messageId":"218","endLine":13,"endColumn":36},{"ruleId":"233","severity":1,"message":"234","line":56,"column":30,"nodeType":"235","messageId":"236","endLine":56,"endColumn":32},{"ruleId":"220","severity":1,"message":"259","line":70,"column":7,"nodeType":"222","endLine":70,"endColumn":21,"suggestions":"260"},{"ruleId":"233","severity":1,"message":"234","line":100,"column":38,"nodeType":"235","messageId":"236","endLine":100,"endColumn":40},{"ruleId":"215","severity":1,"message":"261","line":7,"column":10,"nodeType":"217","messageId":"218","endLine":7,"endColumn":16},{"ruleId":"215","severity":1,"message":"246","line":13,"column":10,"nodeType":"217","messageId":"218","endLine":13,"endColumn":15},{"ruleId":"215","severity":1,"message":"258","line":16,"column":23,"nodeType":"217","messageId":"218","endLine":16,"endColumn":36},{"ruleId":"233","severity":1,"message":"234","line":54,"column":30,"nodeType":"235","messageId":"236","endLine":54,"endColumn":32},{"ruleId":"220","severity":1,"message":"259","line":68,"column":7,"nodeType":"222","endLine":68,"endColumn":21,"suggestions":"262"},{"ruleId":"233","severity":1,"message":"234","line":97,"column":38,"nodeType":"235","messageId":"236","endLine":97,"endColumn":40},{"ruleId":"215","severity":1,"message":"261","line":7,"column":10,"nodeType":"217","messageId":"218","endLine":7,"endColumn":16},{"ruleId":"220","severity":1,"message":"263","line":86,"column":3,"nodeType":"222","endLine":86,"endColumn":5,"suggestions":"264"},{"ruleId":"243","severity":1,"message":"244","line":95,"column":18,"nodeType":"245","endLine":95,"endColumn":73},"no-native-reassign",["265"],"no-negated-in-lhs",["266"],["265"],["266"],"no-unused-vars","'Cookies' is defined but never used.","Identifier","unusedVar","'usedCityName' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'queryEvents'. Either include it or remove the dependency array.","ArrayExpression",["267"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["265"],["266"],"React Hook useEffect has a missing dependency: 'queryMyEvents'. Either include it or remove the dependency array.",["268"],"'setMyEventDetails' is assigned a value but never used.","'setMyEventsColumns' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'dataCallback', 'eventDetails.is_ended', 'handleAccept', 'handleReject', and 'handleStars'. Either include them or remove the dependency array.",["269"],"React Hook useEffect has missing dependencies: 'props.location.params' and 'queryMyVolunteers'. Either include them or remove the dependency array.",["270"],"React Hook useEffect has a missing dependency: 'props.props.vol.id'. Either include it or remove the dependency array.",["271"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'alert' is assigned a value but never used.","react-hooks/rules-of-hooks","React Hook \"useAlert\" is called in function \"allVolunteers\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","React Hook \"useState\" is called in function \"allVolunteers\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","'setDataCallback' is assigned a value but never used.","React Hook \"useEffect\" is called in function \"allVolunteers\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.",["272"],"'transformData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'queryMyVolunteers'. Either include it or remove the dependency array.",["273"],"'retrievedObject' is defined but never used.","'bodyParameters' is assigned a value but never used.","'setVolColumns' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'transformData'. Either include it or remove the dependency array.",["274"],"'Rating' is defined but never used.",["275"],"React Hook useEffect has a missing dependency: 'props.props.org.id'. Either include it or remove the dependency array.",["276"],"no-global-assign","no-unsafe-negation",{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"281","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"290","fix":"292"},{"desc":"293","fix":"294"},"Update the dependencies array to be: [queryEvents, usedCity]",{"range":"295","text":"296"},"Update the dependencies array to be: [queryMyEvents]",{"range":"297","text":"298"},"Update the dependencies array to be: [dataCallback, eventDetails.is_ended, handleAccept, handleReject, handleStars, starRates]",{"range":"299","text":"300"},"Update the dependencies array to be: [props.location.params, queryMyVolunteers]",{"range":"301","text":"302"},"Update the dependencies array to be: [props.props.vol.id]",{"range":"303","text":"304"},{"range":"305","text":"300"},"Update the dependencies array to be: [queryMyVolunteers]",{"range":"306","text":"307"},"Update the dependencies array to be: [dataCallback, transformData]",{"range":"308","text":"309"},{"range":"310","text":"309"},"Update the dependencies array to be: [props.props.org.id]",{"range":"311","text":"312"},[1696,1706],"[queryEvents, usedCity]",[1229,1231],"[queryMyEvents]",[5844,5855],"[dataCallback, eventDetails.is_ended, handleAccept, handleReject, handleStars, starRates]",[6927,6929],"[props.location.params, queryMyVolunteers]",[3415,3417],"[props.props.vol.id]",[5609,5620],[6543,6545],"[queryMyVolunteers]",[2089,2103],"[dataCallback, transformData]",[2147,2161],[2814,2816],"[props.props.org.id]"]